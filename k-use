#!/usr/bin/env bash

# A script that helps you switch "kubeconfig" and "namespace" quickly

# Copyright 2022 kingonion
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

K_USE_KUBECONFIG=""
K_USE_NAMESPACE=""
K_USE_USAGE=""
K_USE_QUIT=""

K_USE_PS1_BG_RED=$(tput setaf 1)
K_USE_PS1_BG_RESET=$(tput sgr0)

K_USE_CURRENT_CONTEXT=""
K_USE_CURRENT_NAMESPACE=""

function k::use::usage() {
    echo "Usage: . ${BASH_SOURCE[0]} [-h] | [-q] | [-k kubeconfig] [-n namespace]"
}

function k::use::error() {
    printf "${K_USE_PS1_BG_RED}%s${K_USE_PS1_BG_RESET}\n" "$@" >&2
}

function k::use::prerequisites() {
    # check whether it's executed with source
    if [ "${BASH_SOURCE[0]}" -ef "${0}" ]
    then
        k::use::usage
        return 1
    fi

    realpath --help &>/dev/null
    if [ $? -ne 0 ]
    then
        k::use::error "realpath is not found in the PATH, exit"
        return 1
    fi

    kubectl --help &>/dev/null
    if [ $? -ne 0 ]
    then
        k::use::error "kubectl is not found in the PATH, exit"
        return 1
    fi
}

function k::use::arguments() {
    while [ $# -gt 0 ]
    do
        case "${1}" in
            -k)
                K_USE_KUBECONFIG="${2}"
                shift
                shift
                ;;
            -n)
                K_USE_NAMESPACE="${2}"
                shift
                shift
                ;;
            -q)
                K_USE_QUIT="true"
                shift
                ;;
            -h)
                K_USE_USAGE="true"
                shift
                ;;
            *)
                k::use::usage
                return 1
                ;;
        esac
    done
}

function k::use::actions() {
    if [ "${K_USE_USAGE}" = "true" ]
    then
        k::use::usage
        return 1
    fi

    if [ "${K_USE_QUIT}" = "true" ]
    then
        k::use::quit
        return 1
    fi

    if [ -z "${K_USE_KUBECONFIG}" ] && [ -z "${K_USE_NAMESPACE}" ]
    then
        k::use::usage
        return 1
    fi

    k::use::kubeconfig::set || return 1

    k::use::namespace::set || return 1
}

function k::use::quit() {
    [ -z "${K_USE_ORIGINAL_PS1}" ] || export PS1="${K_USE_ORIGINAL_PS1}"

    unset KUBECONFIG

    unset K_USE_ORIGINAL_PS1
    unset K_USE_KUBECONFIG
    unset K_USE_NAMESPACE
    unset K_USE_USAGE
    unset K_USE_QUIT

    unset K_USE_PS1_BG_RED
    unset K_USE_PS1_BG_RESET

    unset K_USE_CURRENT_CONTEXT
    unset K_USE_CURRENT_NAMESPACE
}

function k::use::kubeconfig::set {
    [ -n "${K_USE_KUBECONFIG}" ] || return 0

    if [ ! -f "${K_USE_KUBECONFIG}" ]
    then
        k::use::error "file ${K_USE_KUBECONFIG} doesn't exist"
        return 1
    fi

    local kubeconfig_real_path=$(realpath "${K_USE_KUBECONFIG}" 2>/dev/null)
    if [ -z "${kubeconfig_real_path}" ]
    then
        k::use::error "failed to get real path for file ${K_USE_KUBECONFIG}"
        return 1
    fi

    export KUBECONFIG="${kubeconfig_real_path}"
}

function k::use::namespace::set {
    [ -n "${K_USE_NAMESPACE}" ] || return 0

    if [ -z "${KUBECONFIG}" ]
    then
        k::use::error "KUBECONFIG is not set, can't set namespace"
        return 1
    fi

    kubectl config set-context --current --namespace="${K_USE_NAMESPACE}" || return 1
}

function k::use::ps1() {
    [ -n "${KUBECONFIG}" ] || return 0

    k::use::context::get
    k::use::namespace::get

    [ -n "${K_USE_ORIGINAL_PS1}" ] || export K_USE_ORIGINAL_PS1="${PS1}"

    local kubeconfig_file_name=$(echo -n "${KUBECONFIG}" | awk -F '/' 'NR == 1 { print $NF }')
    export PS1="${K_USE_PS1_BG_RED}(${kubeconfig_file_name}:${K_USE_CURRENT_NAMESPACE})${K_USE_PS1_BG_RESET}${K_USE_ORIGINAL_PS1}"
}

function k::use::context::get() {
    K_USE_CURRENT_CONTEXT=$(kubectl config current-context 2>/dev/null)
    [ -n "${K_USE_CURRENT_CONTEXT}" ] || K_USE_CURRENT_CONTEXT="N/A"
}

function k::use::namespace::get() {
    if [ "${K_USE_CURRENT_CONTEXT}" = "N/A" ]
    then
        K_USE_CURRENT_NAMESPACE="N/A"
        return 0
    fi

    K_USE_CURRENT_NAMESPACE=$(kubectl config view --raw -o jsonpath='{.contexts[?(@.name == "'"${K_USE_CURRENT_CONTEXT}"'")].context.namespace}' 2>/dev/null)
    [ -n "${K_USE_CURRENT_NAMESPACE}" ] || K_USE_CURRENT_NAMESPACE="default"
}

function k::use::main() {
    k::use::prerequisites || return

    k::use::arguments "$@" || return

    k::use::actions || return

    k::use::ps1
}

k::use::main "$@"
